[
	{ 
		"name": "", 
		"snip": [""]
	},
	{ 
		"name": "forEach", 
		"snip": ["employees.forEach(employee=> employee.eyeColor=='green');"]
	},
	{ 
		"name": "filter", 
		"snip": ["employees.filter(employee => employee.eyeColor=='blue');"]
	},
	{ 
		"name": "sort", 
		"snip": ["employees.sort((employee,employee1) =>employee.age > employee1.age ? 1 : -1);"]
	},
	{ 
		"name": "find", 
		"snip": ["employees.find(employee => employee.age < 22);"]
	},
	{ 
		"name": "pop", 
		"snip": ["employees.pop();"]
	},
	{ 
		"name": "shift", 
		"snip": ["employees.shift();"]
	},
	{ 
		"name": "slice", 
		"snip": ["employees = employees.slice(1, 3);"]
	},
	{ 
		"name": "callback", 
		"snip": [
			"let doWhatever = function (a,b){",
			"&nbsp;&nbsp;&nbsp;return `This is the two numbers you just entered ${a}, ${b}`;",
			"};",
			"let myFunction = function (a,b, callback){",
			"&nbsp;&nbsp;&nbsp;return callback(a,b);",
			"};",
			"let output = myFunction(2,3,doWhatever);",
			"document.getElementById('output').innerHTML = output;"
		],
		"output": ["This is the two numbers you just entered 2, 3"]
	},
	{ 
		"name": "call", 
		"snip": [
			"let name = {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"let printFullName =  function (city){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in '+ city;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"printFullName.call(name,'markham');"			
		],
		"output": ["Raymond Huang is living in markham"]
	},
	{ 
		"name": "apply", 
		"snip": [
			"let printFullName =  function (city,province){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"printFullName.apply(name,['Markham','Ontario']);"
		],
		"output": ["Raymond Huang is living in Markham, Ontario"]
	}	
,
	{ 
		"name": "bind", 
		"snip": [
			"let printFullName =  function (city,province){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname + '&nbsp;is living in ' +city + ', '+ province;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML = output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Cindy',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Woo',",
			"}",
			"let printMyName = printFullName.bind(name);",
			"printMyName('Toronto','Ontario');"
		],
		"output": ["Cindy Woo is living in Toronto, Ontario"]
	},
	{ 
		"name": "polyfill for bind", 
		"snip": [
			"let printName =  function (city,province,country){",
			"&nbsp;&nbsp;&nbsp;let output = this.firstname + ' '+ this.lastname +'&nbsp;is lived in ' + city + ', '+ province + ', '+ country;",
			"&nbsp;&nbsp;&nbsp;document.getElementById('output').innerHTML += output;",
			"}",
			"let name =  {",
			"&nbsp;&nbsp;&nbsp;firstname: 'Raymond',",
			"&nbsp;&nbsp;&nbsp;lastname: 'Huang',",
			"}",
			"Function.prototype.mybind = function(...args){",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let obj = this;",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;let params = args.slice(1);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return function (...args2) {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;obj.apply(args[0],[...params,...args2]);",
			"&nbsp;&nbsp;&nbsp;}",
			"}",
			"let printMyName2 = printName.mybind(name,'Markham','Ontario');",
			"printMyName2('Canada');"
		],
		"output": ["Raymond Huang is lived in Markham, Ontario, Canada"]
	},
	{ 
		"name": "promise", 
		"snip": [
			"let promiseCount = 0;",
			"function MyDecision(wontDo) {",
			"&nbsp;&nbsp;&nbsp;let thisPromiseCount = ++promiseCount;",
			"&nbsp;&nbsp;&nbsp;let log = document.getElementById('output');",
			"&nbsp;&nbsp;&nbsp;if(wontDo) log.innerHTML += thisPromiseCount +') Do not want do my job(<small>Start looking at the task</small>)&lt;br/&gt;';",
			"&nbsp;&nbsp;&nbsp;else log.innerHTML += thisPromiseCount +') Started doing my job(<small>Beging my task</small>)&lt;br/&gt;';",
			"&nbsp;&nbsp;&nbsp;let promise1 = new Promise((resolve, reject) => {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(wontDo) return reject([thisPromiseCount,'I am tired']);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;log.innerHTML += thisPromiseCount +') Working as promised (<small>promise started</small>)&lt;br/&gt;';",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;setTimeout(() =>resolve(thisPromiseCount), Math.random() * 2000 + 1000);",
			"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}",
			"&nbsp;&nbsp;&nbsp;}",
			"&nbsp;&nbsp;&nbsp;).then((val) =>log.innerHTML += val +') My job is done (<small>promise fullfiled and ended</small>)&lt;br/&gt;')",
			"&nbsp;&nbsp;&nbsp;.catch((reason) =>log.innerHTML += reason[0] +') Promise rejected resason: ' + reason[1]+'&lt;br/&gt;');",
			"&nbsp;&nbsp;&nbsp;log.innerHTML += thisPromiseCount +') Promise ' + (wontDo ? 'rejected' : '&nbsp;made') + '(<small>Sync code terminated</small>)&lt;br/&gt;';",
			"}"		
		]
	}	
]